---
import fetchApi from "../lib/strapi";
import type { metaTypes } from "../types/meta-types";

const meta = await fetchApi<metaTypes>({
  endpoint: "meta", // the content type to fetch
});
/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Couples", href: "/couples/" },
  { label: "About", href: "/about/" },
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
  let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
  if (pathname.at(0) !== "/") pathname = `/${pathname}`;
  if (pathname.at(-1) !== "/") pathname += "/";
  return pathname === href || (href !== "/" && pathname.startsWith(href));
};
---

<header>
  <h1 class="serif">
    <h1 class="condor serif">
      <a href="/">
        {meta.name}
      </a>
    </h1>
    <h2 class="condor">{meta.title}</h2>

    <nav>
      <div class="menu-header">
        <menu-button>
          <template>
            <button class="menu-button" aria-expanded="false">
              <span class="sr-only">Menu</span>
            </button>
          </template>
        </menu-button>
      </div>
      <noscript>
        <ul class="nav-items">
          {
            textLinks.map(({ label, href }) => (
              <li>
                <a
                  aria-current={isCurrentPage(href) ? "page" : null}
                  class="link"
                  href={href}
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
      </noscript>
      <div id="menu-content" hidden>
        <ul class="nav-items">
          {
            textLinks.map(({ label, href }) => (
              <li>
                <a
                  aria-current={isCurrentPage(href) ? "page" : null}
                  class="link"
                  href={href}
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </nav>

    <script>
      class MenuButton extends HTMLElement {
        constructor() {
          super();

          // Inject menu toggle button when JS runs.
          this.appendChild(
            this.querySelector("template")!.content.cloneNode(true)
          );
          const btn = this.querySelector("button")!;

          // Hide menu (shown by default to support no-JS browsers).
          const menu = document.getElementById("menu-content")!;
          menu.hidden = true;
          // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
          menu.classList.add("menu-content");

          /** Set whether the menu is currently expanded or collapsed. */
          const setExpanded = (expand: boolean) => {
            btn.setAttribute("aria-expanded", expand ? "true" : "false");
            menu.hidden = !expand;
          };

          // Toggle menu visibility when the menu button is clicked.
          btn.addEventListener("click", () => setExpanded(menu.hidden));

          // Hide menu button for large screens.
          const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
            setExpanded(e.matches);
            btn.hidden = e.matches;
          };
          const mediaQueries = window.matchMedia("(min-width: 50em)");
          handleViewports(mediaQueries);
          mediaQueries.addEventListener("change", handleViewports);
        }
      }
      customElements.define("menu-button", MenuButton);
    </script>
  </h1>
</header>
